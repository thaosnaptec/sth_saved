1. Root directory location

Thư mục gốc của thành phần(component) là thư mục cấp cao nhất(top-level) cho thành phần thấp hơn theo đó các thư mục và tệp tin của nó được định vị. Tùy thuộc vào cách cài đặt môi trường phát triển Magento của bạn, thư mục gốc của thành phần có thể được đặt ở hai nơi:
    1.1. <Magento install directory>/app: This is the recommended location for component development. You can easily set up this type of environment
        For modules, use app/code.
        For storefront themes, use app/design/frontend.
        For Admin themes, use app/design/adminhtml.
        For language packages, use app/i18n.

    1.2. <Magento install directory>/vendor: This location is found in the alternative setups where the composer create-project command was used to get a Magento 2 metapackage (which downloads the CE or EE code), or a compressed Magento 2 archive was extracted in order to install Magento.

    (*) Any third party components (and the Magento application itself) are downloaded and stored under the vendor directory. If you are using Git to manage project, this directory is typically added to the .gitignore file. Therefore, we recommend you do your customization work in app/code, not vendor.

2.Required files

The following files are required for all components:

    2.1. registration.php file: Among other things, this file specifies the directory in which the component is installed by vendors in production environments. By default, composer automatically installs components in the <Magento root dir>/vendor directory. For more information, see Component registration.
    2.2. composer.json file: Specifies component dependencies and other metadata. For more information, see Composer integration.

3. Use /etc for your configuration files

	Magento 2 looks for configuration information for each module in that module’s etc directory. Depending on the needs of your module, you might have the following 
configuration files at the top level of your module’s etc directory:
    - acl.xml
    - config.xml
    - di.xml
    - module.xml
    - webapi.xml

	(*) Additions you make to those configuration files are applied globally to your module.

In addition to those files, a Magento 2 module also has nested configuration directories in the etc directory for any required administration html, frontend, API REST, or API SOAP specific configuration. Additions you make to files in these directories override the settings in the global configuration files for the respective functionality only. That is, if you add a config.xml file to etc/frontend, the settings you make in that file overrides the settings in etc/config.xml for storefront functionality only.

    <your module root dir>/etc/adminhtml/
    <your module root dir>/etc/frontend/
    <your module root dir>/etc/webapi_rest/
    <your module root dir>/etc/webapi_soap/

Configuration files

    Configuration files that are in the top level of that module’s etc directory are global to that component.
    Configuration files placed in subdirectories (adminhtml, frontend, webapi_rest, webapi_soap) apply only to those respective functional areas.

Tailor your configuration files for what your module does

The exact set of configuration files required for your module depends on what your new module does. The required configuration files depend on how you plan to use the module: will the module be manifested on the storefront UI, or in the Magento Admin panel, or as a backend extension that makes a service call? Or all of the above. For example, if your module performs a function in the Admin, you should add any necessary configuration files for those functions to etc/adminhtml/, like:

    <your module root dir>/etc/adminhtml/di.xml
    <your module root dir>/etc/adminhtml/routes.xml

Similarly, if your module changes the UI, you should add the needed configuration files to ~/etc/frontend/. For example:

    <your module root dir>/etc/frontend/.xml
    <your module root dir>/etc/frontend/page_types.xml

If the module is a service that may call an API, or does some other work that is not manifested in the UI you should add any needed configuration files in the REST and/or SOAP webapi configuration directories, like this:

    <your module root dir>/etc/webapi_rest/di.xml
    <your module root dir>/etc/webapi_soap/di.xml

Keep in mind that you might be able to handle your module’s configuration solely with configuration files at the top level of your module’s etc directory, but the nested directory is a useful way to keep the configuration neatly compartmentalized.

-----------------------
Overview of module configuration files

The responsibilities of the config.xml configuration file used in earlier versions of Magento is now divided between several files, located in various module directories. Magento’s multiple configuration files load on demand only when a module requests a specific configuration type.

You can use these files—also referred to as configuration types—to customize specific aspects of your module’s behavior.

Multiple modules can declare configuration files that affect the same configuration type (for example, events), and these multiple configuration files are merged.

Following are common terms used in this topic:

Configuration object
    The Magento library or class that is responsible for defining and validating the configuration type. For example, the configuration object for config.xml is Magento\Framework\App\Config.
Configuration stage
    Stages are defined as primary, global, and area. Each stage determines when configuration type is loaded and merged with same-named configuration types. (For example, module.xml files are merged with other module.xml files.) For more information, see Configuration load and merge.
Configuration scope
    Complementary to a configuration stages, a scope defines the configuration type model. For example, adminhtml is an area scope that is loaded with at the stage with other modules' adminhtml configurations. For more information, see Modules and areas.

Configuration load and merge

This section discusses how configuration files are loaded and merged.
How Magento loads configuration files

Magento loads configuration files in the following order (all paths are relative to your Magento installation directory):

    Primary configuration (app/etc/di.xml). This file is used to bootstrap Magento.
    Global configurations from modules (<your component base dir>/<vendorname>/<component-type>-<component-name>/etc/*.xml). Collects certain configuration files from all modules and merges them together.
    Area-specific configuration from modules (<your component base dir>/<vendorname>/<component-type>-<component-name>/etc/<area>/*.xml). Collects configuration files from all modules and merges them into the global configuration. Some area-specific configurations can override or extend the global configuration.

where

    <your component base dir> is the base directory in which your component is located. Typical values are app/code or vendor relative to the Magento installation directory.
    <vendorname> is the component’s vendor name; for example, Magento’s vendor name is magento.

    <component-type> is one of the following:
        module-: An extension or module.
        theme-: Theme.
        language-: Language package.

    Currently, themes are located under <your Magento install dir>/app/design/frontend or <your Magento install dir>/app/design/adminhtml
    <component-name>: Name of your component as defined in composer.json.

Configuration file merge

Nodes in configuration files are merged based on their fully qualified XPaths, which has a special attribute defined in $idAttributes array declared as its identifier. This identifier must be unique for all nodes nested under the same parent node.

Magento’s merge algorithm follows:

    If node identifiers are equal (or if there is no identifier defined), all underlying content in the node (attributes, child nodes, and scalar content) is overridden.
    If node identifiers are not equal, the node is a new child of the parent node.
    If the original document has multiple nodes with the same identifier, an error is triggered because the identifiers cannot be distinguished.

After configuration files are merged, the resulting document contains all nodes from the original files.
Configuration types, objects, and interfaces

The following sections provide information about configuration types, their corresponding configuration objects, and interfaces you can use to work with the objects:

    Configuration types and objects
    Configuration interfaces

Configuration types and objects

The following table shows each configuration type and the Magento configuration object to which it relates.
Configuration file 	Description 	Stage 	Configuration object
config.php and env.php 	Deployment configuration 	Loads into memory when Magento initializes 	Has no object, cannot be customized
config.xml 	System configuration 	primary, global 	\Magento\Framework\App\Config
di.xml 	Dependency injection configuration 	primary, global, area 	\Magento\Framework\ObjectManager\Config
events.xml 	Event/observer configuration 	global, area 	\Magento\Framework\Event
routes.xml 	Route configuration 	area 	Magento\Framework\App\Route\Config
Configuration interfaces

You can interact with configuration files using interfaces under Magento\Framework\Config. You can also use these interfaces if you create a new configuration types.

Magento\Framework\Config provides the following interfaces:

    Framework\Config\ConverterInterface, which converts the XML into an in-memory array representation of the configurations.
    Framework\Config\DataInterface, which retrieves the configuration data in a specified scope.
    Framework\Config\FileResolverInterface, which identifies the location of files to be read by \Magento\Framework\Config\ReaderInterface

    Framework\Config\ReaderInterface, which reads the configuration data from storage and selects the storage from which it reads.

    That is, the file system, database, other storage merges the configuration files according to the merging rules, and validates the configuration files with the validation schemas.
    Framework\Config\SchemaLocatorInterface, which locates the XSD schema.
    Framework\Config\ScopeListInterface, which returns a list of scopes.
    Framework\Config\ValidationStateInterface, which retrieves the validation state.

	
---------------------------------------------------
Create or extend configuration types
Extend configuration types

To extend an existing configuration type, you need only create a configuration file in your module.

For example, to add an event observer, you create app/etc/events.xml and declare a new observer.

Because the event configuration type already exists in Magento, the loader and the events.xsd validating schema are already present and functional.

Your new events.xml is automatically collected from your module and merged with other events.xml files for other modules.
Create configuration types

To create new configuration type, you must add at minimum:

    XML configuration files
    XSD validation schema
    A loader

For example, to introduce an adapter for a new search server that enables extensions to configure how its entities are indexed in that server, create:

    A loader.
    An XSD schema.
    Any other classes required for your new type to work.

    An appropriately named configuration file. For example, search.xml. This file is read and validated against your schema.

    If other modules have a search.xml file, they are merged with your file when it loads.

To create a new configuration type, extend the \Magento\Framework\Config\ReaderInterface, which is Magento\Framework\Config\Reader\Filesystem to provide the following parameters:

    $fileResolver. Implements \Magento\Framework\Config\FileResolverInterface. This parameter lists the files containing the configurations of your custom type.
    $converter. Implements \Magento\Framework\Config\ConverterInterface. This parameter converts the XML into the internal array representation of the configurations.
    $schemaLocator. Implements \Magento\Framework\Config/SchemaLocatorInterface. This parameter provides the full path to file(s) containing schema(s) for validation of the individual and merged configuration files.</p>
    $validationState. Implements \Magento\Framework\Config\ValidationStateInterface. This parameter defines whether a configuration file should be validated.
    $fileName. Name of a configuration file. The Reader looks for the file names specified by this parameter in modules’ etc directories.

    $idAttributes. Array of node attribute IDs.

    For example, to merge the XML files:

    array(
      '</path/to/node>' => '<identifierAttributeName>',
      '</path/to/other/node>' => '<identifierAttributeName>',
    }

    $defaultScope. Defines the configuration scope to be read by default. The default value for this parameter is global scope.

After you customize ReaderInterface, you can use it to collect, merge, validate, and convert the configuration files to an internal array representation.
Validate a configuration type

Each configuration file is validated against a schema specific to its configuration type. Example: events, which, in earlier Magento versions, were configured in config.xml, are now configured in events.xml.

Configuration files can be validated both before (optional) and after any merge of multiple files affecting the same configuration type. Unless the validation rules for the individual and merged files are identical, you should provide two schemas for validating the configuration files:

    Schema to validate an individual
    Schema to validate a merged file

New configuration files must be accompanied by XSD validation schemas. An XML configuration file and its XSD validation file must have the same name.

If you must use two XSD files for a single XML file, the names of the schemas should be recognizable and associated with the XML file.

If you have an events.xml file and a first events.xsd file, the XSD files for the merged events.xml file could be named events_merged.xsd.

To ensure validation of an XML file by appropriate XSD file, you must the Uniform Resource Name (URN) to the XSD file in the XML file. For example:

<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager:etc/config.xsd">

Your IDE can validate your configuration files at both runtime and during development.
-------------------------------------------------------------------

Magento's deployment configuration
Contents

    Purpose of the deployment configuration
    Details about the deployment configuration

Purpose of the deployment configuration

Magento’s deployment configuration consists of the module and environmental configuration for your installation. Magento’s deployment configuration is divided between:

    <Magento base dir>/app/etc/config.php, which contains the list of installed modules, themes, and language packages

    <Magento base dir>/app/etc/env.php, which contains environment settings, such as:
        Database credentials and connection settings
        Cache storage settings
        Enabled cache types
        Your encryption key
        Web routing parameters (base URLs, Magento Admin URI)
        File system paths

Together, config.php and env.php are referred to as Magento’s deployment configuration because they are created during installation and are required to start Magento.

The Magento 2 deployment configuration replaces local.xml in Magento 1.x.

Unlike other module configuration files, Magento’s deployment configuration is loaded into memory when Magento initializes, is not merged with any other files, and cannot be extended. (config.php and env.php are merged with each other, however.)
Details about the deployment configuration

config.php and env.php are PHP files that return a multi-dimensional associative array, which is basically a hierarchical arrangement of configuration parameters and values.

On the top level of this array are configuration segments. A segment has arbitrary content (a scalar value or a nested array) distinguished by an arbitrary key—where both the key and its value are defined by the Magento framework.

Magento\Framework\App\DeploymentConfig merely provides access to these sections but does not allow you to extend them.

On the next hierarchy level, items in each segment are ordered according to the module sequence definition, which is obtained by merging all modules’ configuration files, with the exception of disabled modules.

The following sections discusses the structure and contents of the deployment configuration—config.php and env.php.

    Manage installed modules
    Environmental configuration

Manage installed modules

config.php lists your installed components (modules, themes, and language packages). Magento provides both command-line and web-based utilities to manage components (install, uninstall, enable, disable, or upgrade).

Examples:

    Uninstall components: bin/magento setup:uninstall
    Enable or disable components: bin/magento module:enable, bin/magento module:disable.
    Component Manager: coming soon
    System Upgrade: coming soon

config.php snippet:

return array (
  'modules' =>
  array (
    'Magento_Core' => 1,
    'Magento_Store' => 1,
    'Magento_Theme' => 1,
    'Magento_Authorization' => 1,
    'Magento_Directory' => 1,
    'Magento_Backend' => 1,
    'Magento_Backup' => 1,
    'Magento_Eav' => 1,
    'Magento_Customer' => 1,
...
  ),
);

The value 1 or 0 indicates whether a module is enabled or disabled.

Disabled modules are not recognized by the Magento application; in other words, they don’t participate in merging configuration, in dependency injection, events, plug-ins, and so on. Disabled modules do not modify the storefront or Admin and don’t affect routing.

The only practical difference of a module being disabled and being completely absent in the code base is that a disabled module is found by the autoloader, enabling its classes and constants to be reused in other code.
Environmental configuration

The following table provides details about each env.php segment and its structure.
Segment 	Key 	Structure
Database 	db 	

__/db
|__/connection
| |__/[default]
|   |-- host
|   |-- dbname
|   |-- username
|   |-- password
|   |-- model [mysql4]
|   |-- initStatements [SET NAMES utf8;]
|   |-- active [1]
|-- table_prefix

Resources 	resource 	

__/resource
 |__/default_setup
   |-- connection [default]

Session storage 	session 	

__/session
 |__/save
   |-- <files|db>

Admin URL path 	backend 	

__/backend
 |-- frontName

Cache storage 	cache 	

__/cache
 |__/frontend
   |__/See frontend options

Installation date 	install 	

__/install
 |-- date

Encryption key 	encrypt 	

__/crypt
 |-- key

Cache types 	cache_types 	

__/cache_types
 |-- <enumerated cache types>

Message queues 	queue 	

__/queue
        |__/amqp
        |-- host
        |-- port
        |-- user
        |-- password
        |-- virtualhost
        |-- ssl
        























